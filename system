#!/usr/bin/env bash
## LOCATION: $HOME/.bin/

# Insert file paths of files for backup
declare -a SOURCEPATH=($HOME/.bashrc $HOME/.xinitrc $HOME/.Xresources $HOME/.vimrc $HOME/.bin/color $HOME/.bin/notify $HOME/.bin/system $HOME/.bin/powermenu.sh $HOME/.bin/mmwmbar.sh $HOME/.bin/start.sh $HOME/.bin/bar_update.sh $HOME/.bin/install $HOME/.config/rofi/config.rasi $HOME/.config/wal/templates/colors-rofi-dark.rasi $HOME/.config/dunst/dunstrc)

BACKUPDIR=$HOME/dotfiles/

backup () {
	[[ -d $BACKUPDIR ]] || { mkdir $BACKUPDIR; notify "$BACKUPDIR created"; }

	for FILE in ${SOURCEPATH[@]}; do
		if [ -f "$(find $BACKUPDIR -name $(basename $FILE))" ]; then
			if [[ $(cmp $FILE $(find $BACKUPDIR -name $(basename $FILE))) ]]; then
				cp $FILE $BACKUPDIR/$(basename $FILE) || { notify "Error backing up file"; err_log "Error backing up $FILE"; continue; }
				newversions="$newversions$FILE "
			fi
		else
			cp $FILE $BACKUPDIR$(basename $FILE)
			initialbackups="$initialbackups$FILE "
		fi
	done
	notify "New versions of: $newversions"
	notify "Initial backups of: $initialbackups"
}

restore () {
	[[ -d $BACKUPDIR ]] || { notify "$BACKUPDIR not found. Not really sure what happened, this was downloaded along with the dotfiles"; exit 1; }

	for FILE in ${SOURCEPATH[@]}; do
		if [ ! -d $(dirname $FILE) ]; then
			mkdir -p $(dirname $FILE)
			dirscreated="$dirscreated$FILE "
		fi
		if [[ $(cmp $(find $BACKUPDIR -name $(basename $FILE)) $FILE) ]]; then
			cp $(find $BACKUPDIR -name $(basename $FILE)) $FILE || { notify "Error restoring $FILE"; err_log "Error restoring $FILE"; continue; }
			restoredfiles="$restoredfiles$FILE "
		fi
	done
	notify "Directories created for: $dirscreated"
	notify "Files restored: $restoredfiles"
}

init () {
	# .git directory causes issues with find function when restoring, after repo is cloned from github
	sudo rm -r .git
	
	[[ -d $BACKUPDIR ]] || { notify "$BACKUPDIR not found. Please git clone repository"; exit 1; }

	for FILE in ${SOURCEPATH[@]}; do
		if [ ! -d $(dirname $FILE) ]; then
			mkdir -p $(dirname $FILE)
			dirscreated="$dirscreated$FILE "
		fi

		cp $(find $BACKUPDIR -name $(basename $FILE)) $FILE || { notify "Error restoring $FILE"; err_log "Error restoring $FILE"; continue; }
		restoredfiles="$restoredfiles$FILE "
	done
	notify "Directories created for: $dirscreated"
	notify "Files restored: $restoredfiles"
}

# Preferred method of notification
notify() {
	notify-send "$@" || { echo "$@"; }
}
err_log() {
	[[ ! -e err.log ]] || touch err.log
	echo "$@" >> err.log
}
usage() {
    echo "Usage:"
    echo "backup      backup files"
    echo "restore     restore files"
    echo "init        initial file restore on new system"
    echo ""
    echo "Make sure to add files that need to be backed up to the SOURCEPATH array"
    echo "To check for a list of errors, look for a file named err.log"
    echo "WARNING: restoring files will overwrite files with the same name in the destination directory"
}

case $1 in 
	backup) backup "$@" ;;
	restore) restore "$@" ;;
	init) init "$@" ;;
	*) usage ;;
esac

